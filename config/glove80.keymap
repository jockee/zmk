/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


#define KSFT 57
#define KDOT 60
#define KCOMMA 61
#define KA 35
#define KB 27
#define KC 49
#define KD 50
#define KE 42
#define KF 25
#define KG 39
#define KH 59
#define KI 43
#define KJ 28
#define KK 58
#define KL 29
#define KM 40
#define KN 41
#define KO 44
#define KAUML 45
#define KP 26
#define KQ 23
#define KR 36
#define KS 37
#define KT 38
#define KU 30
#define KV 51
#define KW 24
#define KX 48
#define KY 31
#define KOUML 32
#define KARING 33
#define KZ 47
#define KSPACE 70
#define KDUP 74
#define KAPOS 999999

/* Automatically generated layer name #define */
#define ALPHA 0
#define SWEDISH_CHORDS 1
#define SYM 2
#define NUM 3
#define MAGIC 4
#define POST_CHORD_LAYER 5

/* On demand includes */
#include "chords.keymap" // Include the generated chord definitions


/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* #define for key positions */
#define POS_LH_T2 53
#define POS_LH_T1 52
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79


&sk {
    release-after-ms = <2000>;
    quick-release;
};

#define CYCLE_COMBO(name, keys, tout, idx, lays) \
    name { \
        timeout-ms = <tout>; \
        key-positions = <keys>; \
        bindings = <&cyc_wrk idx>; \
        layers = <lays>;  \
    };

/ {
    combos {
        compatible = "zmk,combos";


        CYCLE_COMBO(combo_en_the, KT KH KE, 60, 0, 0)
CYCLE_COMBO(combo_en_be, KB KE, 30, 1, 0)
CYCLE_COMBO(combo_en_is, KI KS, 30, 2, 0)
CYCLE_COMBO(combo_en_are, KA KR KE, 60, 3, 0)
CYCLE_COMBO(combo_en_was, KW KA KS, 60, 4, 0)
CYCLE_COMBO(combo_en_and, KA KN KD, 60, 5, 0)
CYCLE_COMBO(combo_en_a, KA KDUP, 80, 6, 0)
CYCLE_COMBO(combo_en_of, KO KF, 30, 7, 0)
CYCLE_COMBO(combo_en_to, KT KO, 30, 8, 0)
CYCLE_COMBO(combo_en_in, KI KN, 30, 9, 0)
CYCLE_COMBO(combo_en_i, KI KDUP, 80, 10, 0)
CYCLE_COMBO(combo_en_you, KY KU, 30, 11, 0)
CYCLE_COMBO(combo_en_it, KI KT, 30, 12, 0)
CYCLE_COMBO(combo_en_have, KH KA KV, 60, 13, 0)
CYCLE_COMBO(combo_en_that, KT KH KA, 60, 14, 0)
CYCLE_COMBO(combo_en_for, KF KO KR, 60, 15, 0)
CYCLE_COMBO(combo_en_do, KD KO, 30, 16, 0)
CYCLE_COMBO(combo_en_he, KH KE, 30, 17, 0)
CYCLE_COMBO(combo_en_with, KW KI KT, 60, 18, 0)
CYCLE_COMBO(combo_en_on, KO KN, 30, 19, 0)
CYCLE_COMBO(combo_en_this, KT KH KI, 60, 20, 0)
CYCLE_COMBO(combo_en_we, KW KE, 30, 21, 0)
CYCLE_COMBO(combo_en_not, KN KO KT, 60, 22, 0)
CYCLE_COMBO(combo_en_but, KB KU, 30, 23, 0)
CYCLE_COMBO(combo_en_they, KT KH KY, 60, 24, 0)
CYCLE_COMBO(combo_en_say, KS KA KY, 60, 25, 0)
CYCLE_COMBO(combo_en_at, KA KT, 30, 26, 0)
CYCLE_COMBO(combo_en_what, KW KH KA, 60, 27, 0)
CYCLE_COMBO(combo_en_from, KF KR KM, 60, 28, 0)
CYCLE_COMBO(combo_en_go, KG KO, 30, 29, 0)
CYCLE_COMBO(combo_en_or, KO KR, 30, 30, 0)
CYCLE_COMBO(combo_en_by, KB KY, 30, 31, 0)
CYCLE_COMBO(combo_en_get, KG KE, 30, 32, 0)
CYCLE_COMBO(combo_en_she, KS KH KE, 60, 33, 0)
CYCLE_COMBO(combo_en_can, KC KA KN, 60, 34, 0)
CYCLE_COMBO(combo_en_as, KA KS, 30, 35, 0)
CYCLE_COMBO(combo_en_know, KK KO KW, 60, 36, 0)
CYCLE_COMBO(combo_en_if, KI KF, 30, 37, 0)
CYCLE_COMBO(combo_en_me, KM KE, 30, 38, 0)
CYCLE_COMBO(combo_en_your, KY KU KR, 60, 39, 0)
CYCLE_COMBO(combo_en_all, KA KL, 30, 40, 0)
CYCLE_COMBO(combo_en_who, KW KH KO, 60, 41, 0)
CYCLE_COMBO(combo_en_about, KA KB KO, 60, 42, 0)
CYCLE_COMBO(combo_en_will, KW KI KL, 60, 43, 0)
CYCLE_COMBO(combo_en_so, KS KO, 30, 44, 0)
CYCLE_COMBO(combo_en_would, KW KO KU, 60, 45, 0)
CYCLE_COMBO(combo_en_make, KM KQ, 30, 46, 0)
CYCLE_COMBO(combo_en_just, KJ KU KS, 60, 47, 0)
CYCLE_COMBO(combo_en_up, KU KP, 30, 48, 0)
CYCLE_COMBO(combo_en_think, KT KI KK, 60, 49, 0)
CYCLE_COMBO(combo_en_time, KT KI KM, 60, 50, 0)
CYCLE_COMBO(combo_en_there, KT KH KR, 60, 51, 0)
CYCLE_COMBO(combo_en_see, KS KE, 30, 52, 0)
CYCLE_COMBO(combo_en_out, KO KU KT, 60, 53, 0)
CYCLE_COMBO(combo_en_one, KO KN KE, 60, 54, 0)
CYCLE_COMBO(combo_en_come, KC KO KM, 60, 55, 0)
CYCLE_COMBO(combo_en_people, KP KE KO, 60, 56, 0)
CYCLE_COMBO(combo_en_take, KT KA KK, 60, 57, 0)
CYCLE_COMBO(combo_en_year, KY KE KA, 60, 58, 0)
CYCLE_COMBO(combo_en_him, KH KI KDUP, 80, 59, 0)
CYCLE_COMBO(combo_en_them, KT KH, 30, 60, 0)
CYCLE_COMBO(combo_en_some, KS KO KM, 60, 61, 0)
CYCLE_COMBO(combo_en_want, KW KA KN, 60, 62, 0)
CYCLE_COMBO(combo_en_how, KH KW, 30, 63, 0)
CYCLE_COMBO(combo_en_when, KW KH KE, 60, 64, 0)
CYCLE_COMBO(combo_en_which, KW KH KI, 60, 65, 0)
CYCLE_COMBO(combo_en_now, KN KO KW, 60, 66, 0)
CYCLE_COMBO(combo_en_like, KL KI KQ, 60, 67, 0)
CYCLE_COMBO(combo_en_other, KO KT KH, 60, 68, 0)
CYCLE_COMBO(combo_en_our, KO KU KR, 60, 69, 0)
CYCLE_COMBO(combo_en_into, KI KN KT, 60, 70, 0)
CYCLE_COMBO(combo_en_here, KH KE KR, 60, 71, 0)
CYCLE_COMBO(combo_en_then, KT KE KN, 60, 72, 0)
CYCLE_COMBO(combo_en_than, KT KA KN, 60, 73, 0)
CYCLE_COMBO(combo_en_look, KL KO KQ, 60, 74, 0)
CYCLE_COMBO(combo_en_way, KW KA KY, 60, 75, 0)
CYCLE_COMBO(combo_en_more, KM KO KR, 60, 76, 0)
CYCLE_COMBO(combo_en_these, KT KH KS, 60, 77, 0)
CYCLE_COMBO(combo_en_no, KN KO KDUP, 80, 78, 0)
CYCLE_COMBO(combo_en_thing, KT KH KDUP, 80, 79, 0)
CYCLE_COMBO(combo_en_well, KW KE KL, 60, 80, 0)
CYCLE_COMBO(combo_en_because, KB KE KC, 60, 81, 0)
CYCLE_COMBO(combo_en_also, KA KL KS, 60, 82, 0)
CYCLE_COMBO(combo_en_two, KT KW KO, 60, 83, 0)
CYCLE_COMBO(combo_en_use, KU KS KDUP, 80, 84, 0)
CYCLE_COMBO(combo_en_tell, KT KE KDUP, 80, 85, 0)
CYCLE_COMBO(combo_en_good, KG KO KDUP, 80, 86, 0)
CYCLE_COMBO(combo_en_first, KF KI KR, 60, 87, 0)
CYCLE_COMBO(combo_en_man, KM KA, 30, 88, 0)
CYCLE_COMBO(combo_en_day, KD KA KY, 60, 89, 0)
CYCLE_COMBO(combo_en_find, KF KI KN, 60, 90, 0)
CYCLE_COMBO(combo_en_give, KG KI KE, 60, 91, 0)
CYCLE_COMBO(combo_en_new, KN KE KW, 60, 92, 0)
CYCLE_COMBO(combo_en_us, KU KS, 30, 93, 0)
CYCLE_COMBO(combo_en_any, KA KN KY, 60, 94, 0)
CYCLE_COMBO(combo_en_those, KT KO KE, 60, 95, 0)
CYCLE_COMBO(combo_en_very, KV KE KR, 60, 96, 0)
CYCLE_COMBO(combo_en_need, KN KE KD, 60, 97, 0)
CYCLE_COMBO(combo_en_back, KB KA KK, 60, 98, 0)
CYCLE_COMBO(combo_en_should, KS KH KO, 60, 99, 0)
CYCLE_COMBO(combo_en_even, KE KV KN, 60, 100, 0)
CYCLE_COMBO(combo_en_only, KO KL KY, 60, 101, 0)
CYCLE_COMBO(combo_en_many, KM KY KDUP, 80, 102, 0)
CYCLE_COMBO(combo_en_really, KR KL KY, 60, 103, 0)
CYCLE_COMBO(combo_en_work, KW KO, 30, 104, 0)
CYCLE_COMBO(combo_en_life, KL KI KF, 60, 105, 0)
CYCLE_COMBO(combo_en_why, KW KH KY, 60, 106, 0)
CYCLE_COMBO(combo_en_right, KR KI KG, 60, 107, 0)
CYCLE_COMBO(combo_en_down, KD KO KW, 60, 108, 0)
CYCLE_COMBO(combo_en_try, KT KR KY, 60, 109, 0)
CYCLE_COMBO(combo_en_let, KL KE KT, 60, 110, 0)
CYCLE_COMBO(combo_en_something, KS KO KT, 60, 111, 0)
CYCLE_COMBO(combo_en_too, KT KO KDUP, 80, 112, 0)
CYCLE_COMBO(combo_en_call, KC KA KL, 60, 113, 0)
CYCLE_COMBO(combo_en_woman, KW KO KM, 60, 114, 0)
CYCLE_COMBO(combo_en_may, KM KA KY, 60, 115, 0)
CYCLE_COMBO(combo_en_still, KS KI KL, 60, 116, 0)
CYCLE_COMBO(combo_en_through, KT KR KO, 60, 117, 0)
CYCLE_COMBO(combo_en_mean, KM KE KA, 60, 118, 0)
CYCLE_COMBO(combo_en_after, KA KF KT, 60, 119, 0)
CYCLE_COMBO(combo_en_never, KN KV KR, 60, 120, 0)
CYCLE_COMBO(combo_en_world, KW KL KD, 60, 121, 0)
CYCLE_COMBO(combo_en_feel, KF KE KL, 60, 122, 0)
CYCLE_COMBO(combo_en_great, KG KR KE, 60, 123, 0)
CYCLE_COMBO(combo_en_last, KL KS KT, 60, 124, 0)
CYCLE_COMBO(combo_en_child, KC KH KI, 60, 125, 0)
CYCLE_COMBO(combo_en_oh, KO KH, 30, 126, 0)
CYCLE_COMBO(combo_en_ah, KA KH, 30, 127, 0)
CYCLE_COMBO(combo_en_over, KO KV KE, 60, 128, 0)
CYCLE_COMBO(combo_en_ask, KA KS KK, 60, 129, 0)
CYCLE_COMBO(combo_en_state, KS KT KA, 60, 130, 0)
CYCLE_COMBO(combo_en_much, KM KU KC, 60, 131, 0)
CYCLE_COMBO(combo_en_talk, KT KA KL, 60, 132, 0)
CYCLE_COMBO(combo_en_keep, KK KE KP, 60, 133, 0)
CYCLE_COMBO(combo_en_leave, KL KE KV, 60, 134, 0)
CYCLE_COMBO(combo_en_put, KP KU KDUP, 80, 135, 0)
CYCLE_COMBO(combo_en_help, KH KE KP, 60, 136, 0)
CYCLE_COMBO(combo_en_big, KB KI, 30, 137, 0)
CYCLE_COMBO(combo_en_where, KW KE KDUP, 80, 138, 0)
CYCLE_COMBO(combo_en_same, KS KA KM, 60, 139, 0)
CYCLE_COMBO(combo_en_own, KO KW KDUP, 80, 140, 0)
CYCLE_COMBO(combo_en_while, KW KH KDUP, 80, 141, 0)
CYCLE_COMBO(combo_en_start, KS KT KR, 60, 142, 0)
CYCLE_COMBO(combo_en_three, KT KR KE, 60, 143, 0)
CYCLE_COMBO(combo_en_high, KH KI KG, 60, 144, 0)
CYCLE_COMBO(combo_en_every, KE KR KY, 60, 145, 0)
CYCLE_COMBO(combo_en_another, KA KN KO, 60, 146, 0)
CYCLE_COMBO(combo_en_become, KB KE KO, 60, 147, 0)
CYCLE_COMBO(combo_en_most, KM KS KT, 60, 148, 0)
CYCLE_COMBO(combo_en_between, KB KE KW, 60, 149, 0)
CYCLE_COMBO(combo_en_happen, KH KA KP, 60, 150, 0)
CYCLE_COMBO(combo_en_family, KF KA KM, 60, 151, 0)
CYCLE_COMBO(combo_en_old, KO KL KD, 60, 152, 0)
CYCLE_COMBO(combo_en_yes, KY KE KS, 60, 153, 0)
CYCLE_COMBO(combo_en_house, KH KO KU KS, 80, 154, 0)
CYCLE_COMBO(combo_en_show, KS KH KW, 60, 155, 0)
CYCLE_COMBO(combo_en_again, KA KG KI, 60, 156, 0)
CYCLE_COMBO(combo_en_student, KS KU KD, 60, 157, 0)
CYCLE_COMBO(combo_en_seem, KS KE KM, 60, 158, 0)
CYCLE_COMBO(combo_en_might, KM KI KG, 60, 159, 0)
CYCLE_COMBO(combo_en_part, KP KA KR, 60, 160, 0)
CYCLE_COMBO(combo_en_hear, KH KE KA, 60, 161, 0)
CYCLE_COMBO(combo_en_its, KI KT KS, 60, 162, 0)
CYCLE_COMBO(combo_en_place, KP KL KA, 60, 163, 0)
CYCLE_COMBO(combo_en_problem, KP KR KM, 60, 164, 0)
CYCLE_COMBO(combo_en_believe, KB KE KL, 60, 165, 0)
CYCLE_COMBO(combo_en_country, KC KO KU, 60, 166, 0)
CYCLE_COMBO(combo_en_always, KA KL KW, 60, 167, 0)
CYCLE_COMBO(combo_en_week, KW KE KK, 60, 168, 0)
CYCLE_COMBO(combo_en_point, KP KO KI, 60, 169, 0)
CYCLE_COMBO(combo_en_hand, KH KA KD, 60, 170, 0)
CYCLE_COMBO(combo_en_off, KO KF KDUP, 80, 171, 0)
CYCLE_COMBO(combo_en_play, KP KL KY, 60, 172, 0)
CYCLE_COMBO(combo_en_turn, KT KU KR, 60, 173, 0)
CYCLE_COMBO(combo_en_few, KF KE KW, 60, 174, 0)
CYCLE_COMBO(combo_en_group, KG KR KO, 60, 175, 0)
CYCLE_COMBO(combo_en_such, KS KU KH, 60, 176, 0)
CYCLE_COMBO(combo_en_fact, KF KA KDUP, 80, 177, 0)
CYCLE_COMBO(combo_en_against, KA KG KS, 60, 178, 0)
CYCLE_COMBO(combo_en_case, KC KA KE, 60, 179, 0)
CYCLE_COMBO(combo_en_around, KA KR KO, 60, 180, 0)
CYCLE_COMBO(combo_en_company, KC KO KY, 60, 181, 0)
CYCLE_COMBO(combo_en_system, KS KY KT, 60, 182, 0)
CYCLE_COMBO(combo_en_each, KE KC KH, 60, 183, 0)
CYCLE_COMBO(combo_en_program, KP KR KO, 60, 184, 0)
CYCLE_COMBO(combo_en_question, KQ KU KS, 60, 185, 0)
CYCLE_COMBO(combo_en_during, KD KU KR, 60, 186, 0)
CYCLE_COMBO(combo_en_run, KR KU KN, 60, 187, 0)
CYCLE_COMBO(combo_en_small, KS KM, 30, 188, 0)
CYCLE_COMBO(combo_en_number, KN KU KB, 60, 189, 0)
CYCLE_COMBO(combo_en_move, KM KO KV, 60, 190, 0)
CYCLE_COMBO(combo_en_night, KN KI KG, 60, 191, 0)
CYCLE_COMBO(combo_en_live, KL KI KV, 60, 192, 0)
CYCLE_COMBO(combo_en_hold, KH KO KD, 60, 193, 0)
CYCLE_COMBO(combo_en_today, KT KO KY, 60, 194, 0)
CYCLE_COMBO(combo_en_bring, KB KR KI, 60, 195, 0)
CYCLE_COMBO(combo_en_next, KN KE KX, 60, 196, 0)
CYCLE_COMBO(combo_en_without, KW KI KO, 60, 197, 0)
CYCLE_COMBO(combo_en_before, KB KE KF, 60, 198, 0)
CYCLE_COMBO(combo_en_large, KL KA KR, 60, 199, 0)
CYCLE_COMBO(combo_en_must, KM KU KS, 60, 200, 0)
CYCLE_COMBO(combo_en_home, KH KO KE, 60, 201, 0)
CYCLE_COMBO(combo_en_under, KU KN KD, 60, 202, 0)
CYCLE_COMBO(combo_en_water, KW KA KT, 60, 203, 0)
CYCLE_COMBO(combo_en_room, KR KO KDUP, 80, 204, 0)
CYCLE_COMBO(combo_en_write, KW KI KE, 60, 205, 0)
CYCLE_COMBO(combo_en_area, KA KR, 30, 206, 0)
CYCLE_COMBO(combo_en_national, KN KA KI, 60, 207, 0)
CYCLE_COMBO(combo_en_money, KM KO KY, 60, 208, 0)
CYCLE_COMBO(combo_en_story, KS KO KR, 60, 209, 0)
CYCLE_COMBO(combo_en_young, KY KN KG, 60, 210, 0)
CYCLE_COMBO(combo_en_month, KM KO KT, 60, 211, 0)
CYCLE_COMBO(combo_en_different, KD KI KF, 60, 212, 0)
CYCLE_COMBO(combo_en_lot, KL KO KT, 60, 213, 0)
CYCLE_COMBO(combo_en_study, KS KT KU, 60, 214, 0)
CYCLE_COMBO(combo_en_book, KB KO KQ, 60, 215, 0)
CYCLE_COMBO(combo_en_job, KJ KO KB, 60, 216, 0)
CYCLE_COMBO(combo_en_word, KW KD KDUP, 80, 217, 0)
CYCLE_COMBO(combo_en_though, KT KH KU, 60, 218, 0)
CYCLE_COMBO(combo_en_business, KB KU KS, 60, 219, 0)
CYCLE_COMBO(combo_en_issue, KI KS KU, 60, 220, 0)
CYCLE_COMBO(combo_en_side, KS KI KD, 60, 221, 0)
CYCLE_COMBO(combo_en_kind, KQ KI KN KD, 80, 222, 0)
CYCLE_COMBO(combo_en_four, KF KO KU, 60, 223, 0)
CYCLE_COMBO(combo_en_head, KH KE KD, 60, 224, 0)
CYCLE_COMBO(combo_en_far, KF KA, 30, 225, 0)
CYCLE_COMBO(combo_en_black, KB KL KA, 60, 226, 0)
CYCLE_COMBO(combo_en_long, KL KO KDUP, 80, 227, 0)
CYCLE_COMBO(combo_en_both, KB KO KH, 60, 228, 0)
CYCLE_COMBO(combo_en_little, KL KI KT, 60, 229, 0)
CYCLE_COMBO(combo_en_since, KS KI KN, 60, 230, 0)
CYCLE_COMBO(combo_en_provide, KP KR KE, 60, 231, 0)
CYCLE_COMBO(combo_en_service, KS KE KR, 60, 232, 0)
CYCLE_COMBO(combo_en_friend, KF KR KN, 60, 233, 0)
CYCLE_COMBO(combo_en_important, KI KM KP, 60, 234, 0)
CYCLE_COMBO(combo_en_father, KF KA KR, 60, 235, 0)
CYCLE_COMBO(combo_en_sit, KS KI KDUP, 80, 236, 0)
CYCLE_COMBO(combo_en_away, KA KW KDUP, 80, 237, 0)
CYCLE_COMBO(combo_en_until, KU KN KT, 60, 238, 0)
CYCLE_COMBO(combo_en_power, KP KO KW, 60, 239, 0)
CYCLE_COMBO(combo_en_hour, KH KO KU, 60, 240, 0)
CYCLE_COMBO(combo_en_game, KG KA KM, 60, 241, 0)
CYCLE_COMBO(combo_en_often, KO KF KT, 60, 242, 0)
CYCLE_COMBO(combo_en_yet, KY KE KT, 60, 243, 0)
CYCLE_COMBO(combo_en_line, KL KI KE, 60, 244, 0)
CYCLE_COMBO(combo_en_end, KE KN KDUP, 80, 245, 0)
CYCLE_COMBO(combo_en_among, KA KM KO, 60, 246, 0)
CYCLE_COMBO(combo_en_ever, KE KV, 30, 247, 0)
CYCLE_COMBO(combo_en_stand, KS KT KN, 60, 248, 0)
CYCLE_COMBO(combo_en_bad, KB KA, 30, 249, 0)
CYCLE_COMBO(combo_en_lose, KL KO KS, 60, 250, 0)
CYCLE_COMBO(combo_en_however, KH KO KV, 60, 251, 0)
CYCLE_COMBO(combo_en_member, KM KB KR, 60, 252, 0)
CYCLE_COMBO(combo_en_pay, KP KA KY, 60, 253, 0)
CYCLE_COMBO(combo_en_law, KL KA KU, 60, 254, 0)
CYCLE_COMBO(combo_en_meet, KM KE KT, 60, 255, 0)
CYCLE_COMBO(combo_en_car, KC KA KR, 60, 256, 0)
CYCLE_COMBO(combo_en_city, KC KI KT, 60, 257, 0)
CYCLE_COMBO(combo_en_almost, KA KL KO, 60, 258, 0)
CYCLE_COMBO(combo_en_include, KI KN KC, 60, 259, 0)
CYCLE_COMBO(combo_en_continue, KC KO KN, 60, 260, 0)
CYCLE_COMBO(combo_en_set, KS KE KT, 60, 261, 0)
CYCLE_COMBO(combo_en_later, KL KT KR, 60, 262, 0)
CYCLE_COMBO(combo_en_community, KC KO KI, 60, 263, 0)
CYCLE_COMBO(combo_en_name, KN KA KE, 60, 264, 0)
CYCLE_COMBO(combo_en_five, KF KI KV, 60, 265, 0)
CYCLE_COMBO(combo_en_once, KO KC KE, 60, 266, 0)
CYCLE_COMBO(combo_en_white, KW KH KT, 60, 267, 0)
CYCLE_COMBO(combo_en_least, KL KE KS, 60, 268, 0)
CYCLE_COMBO(combo_en_learn, KL KE KA, 60, 269, 0)
CYCLE_COMBO(combo_en_real, KR KE KL, 60, 270, 0)
CYCLE_COMBO(combo_en_change, KC KH KA, 60, 271, 0)
CYCLE_COMBO(combo_en_team, KT KE KA, 60, 272, 0)
CYCLE_COMBO(combo_en_minute, KM KI KU, 60, 273, 0)
CYCLE_COMBO(combo_en_several, KS KE KV, 60, 274, 0)
CYCLE_COMBO(combo_en_idea, KI KD KE, 60, 275, 0)
CYCLE_COMBO(combo_en_kid, KK KI KD, 60, 276, 0)
CYCLE_COMBO(combo_en_body, KB KY KDUP, 80, 277, 0)
CYCLE_COMBO(combo_en_information, KI KF KO, 60, 278, 0)
CYCLE_COMBO(combo_en_nothing, KN KO KI, 60, 279, 0)
CYCLE_COMBO(combo_en_ago, KA KG KO, 60, 280, 0)
CYCLE_COMBO(combo_en_lead, KL KE KD, 60, 281, 0)
CYCLE_COMBO(combo_en_social, KS KO KI, 60, 282, 0)
CYCLE_COMBO(combo_en_understand, KU KN KS, 60, 283, 0)
CYCLE_COMBO(combo_en_whether, KW KE KT, 60, 284, 0)
CYCLE_COMBO(combo_en_watch, KW KA KC, 60, 285, 0)
CYCLE_COMBO(combo_en_together, KT KO KE KH, 80, 286, 0)
CYCLE_COMBO(combo_en_follow, KF KO KL, 60, 287, 0)
CYCLE_COMBO(combo_en_parent, KP KA KE, 60, 288, 0)
CYCLE_COMBO(combo_en_stop, KS KO KP, 60, 289, 0)
CYCLE_COMBO(combo_en_face, KF KA KE, 60, 290, 0)
CYCLE_COMBO(combo_en_create, KC KR KE, 60, 291, 0)
CYCLE_COMBO(combo_en_public, KP KU KL, 60, 292, 0)
CYCLE_COMBO(combo_en_already, KA KL KY, 60, 293, 0)
CYCLE_COMBO(combo_en_speak, KS KP KE, 60, 294, 0)
CYCLE_COMBO(combo_en_read, KR KE KD, 60, 295, 0)
CYCLE_COMBO(combo_en_level, KL KE KDUP, 80, 296, 0)
CYCLE_COMBO(combo_en_allow, KA KO KW, 60, 297, 0)
CYCLE_COMBO(combo_en_add, KA KD, 30, 298, 0)
CYCLE_COMBO(combo_en_office, KO KF KE, 60, 299, 0)
CYCLE_COMBO(combo_en_spend, KS KP KN, 60, 300, 0)
CYCLE_COMBO(combo_en_door, KD KO KR, 60, 301, 0)
CYCLE_COMBO(combo_en_health, KH KE KDUP, 80, 302, 0)
CYCLE_COMBO(combo_en_person, KP KR KS, 60, 303, 0)
CYCLE_COMBO(combo_en_sure, KS KU KR, 60, 304, 0)
CYCLE_COMBO(combo_en_history, KH KI KS, 60, 305, 0)
CYCLE_COMBO(combo_en_party, KP KR KY, 60, 306, 0)
CYCLE_COMBO(combo_en_within, KW KT KN, 60, 307, 0)
CYCLE_COMBO(combo_en_grow, KG KO KW, 60, 308, 0)
CYCLE_COMBO(combo_en_result, KR KS KL, 60, 309, 0)
CYCLE_COMBO(combo_en_open, KO KP KN, 60, 310, 0)
CYCLE_COMBO(combo_en_morning, KM KO KI, 60, 311, 0)
CYCLE_COMBO(combo_en_walk, KW KK KDUP, 80, 312, 0)
CYCLE_COMBO(combo_en_reason, KR KE KN, 60, 313, 0)
CYCLE_COMBO(combo_en_low, KL KO KW, 60, 314, 0)
CYCLE_COMBO(combo_en_win, KW KI KN, 80, 315, 0)
CYCLE_COMBO(combo_en_research, KR KS KH, 60, 316, 0)
CYCLE_COMBO(combo_en_girl, KG KR KL, 60, 317, 0)
CYCLE_COMBO(combo_en_guy, KG KU KY, 60, 318, 0)
CYCLE_COMBO(combo_en_early, KE KL KY, 60, 319, 0)
CYCLE_COMBO(combo_en_food, KF KO KD, 60, 320, 0)
CYCLE_COMBO(combo_en_moment, KM KO KE, 60, 321, 0)
CYCLE_COMBO(combo_en_himself, KH KI KE, 60, 322, 0)
CYCLE_COMBO(combo_en_air, KA KI KR, 60, 323, 0)
CYCLE_COMBO(combo_en_force, KF KR KE, 60, 324, 0)
CYCLE_COMBO(combo_en_offer, KO KE KR, 60, 325, 0)
CYCLE_COMBO(combo_en_enough, KE KN KG, 60, 326, 0)
CYCLE_COMBO(combo_en_although, KA KT KU, 60, 327, 0)
CYCLE_COMBO(combo_en_remember, KR KE KM, 60, 328, 0)
CYCLE_COMBO(combo_en_second, KS KE KD, 60, 329, 0)
CYCLE_COMBO(combo_en_boy, KB KO KY, 60, 330, 0)
CYCLE_COMBO(combo_en_maybe, KM KB KE, 60, 331, 0)
CYCLE_COMBO(combo_en_toward, KT KO KA, 60, 332, 0)
CYCLE_COMBO(combo_en_able, KA KB KE, 60, 333, 0)
CYCLE_COMBO(combo_en_age, KA KG KE, 60, 334, 0)
CYCLE_COMBO(combo_en_everything, KE KV KY, 60, 335, 0)
CYCLE_COMBO(combo_en_love, KL KO KV, 60, 336, 0)
CYCLE_COMBO(combo_en_process, KP KR KC, 60, 337, 0)
CYCLE_COMBO(combo_en_input, KI KN KP, 60, 338, 0)
CYCLE_COMBO(combo_en_output, KO KU KP, 60, 339, 0)
CYCLE_COMBO(combo_en_qualifier, KQ KU, 30, 340, 0)
CYCLE_COMBO(combo_en_error, KE KR, 30, 341, 0)
CYCLE_COMBO(combo_en_code, KC KO KD, 60, 342, 0)
CYCLE_COMBO(combo_en_method, KM KE KD, 60, 343, 0)
CYCLE_COMBO(combo_en_object, KO KJ KE, 60, 344, 0)
CYCLE_COMBO(combo_en_variable, KV KA KR, 60, 345, 0)
CYCLE_COMBO(combo_en_array, KA KR KY, 60, 346, 0)
CYCLE_COMBO(combo_en_request, KR KE KQ, 60, 347, 0)
CYCLE_COMBO(combo_en_response, KR KE KS KP, 80, 348, 0)
CYCLE_COMBO(combo_en_access, KA KX KS, 60, 349, 0)
CYCLE_COMBO(combo_en_database, KD KA KE, 60, 350, 0)
CYCLE_COMBO(combo_en_server, KS KR KV, 60, 351, 0)
CYCLE_COMBO(combo_en_log, KL KO KG, 60, 352, 0)
CYCLE_COMBO(combo_en_connect, KC KN KE, 60, 353, 0)
CYCLE_COMBO(combo_en_config, KC KO KG, 60, 354, 0)
CYCLE_COMBO(combo_en_load, KL KA KD, 60, 355, 0)
CYCLE_COMBO(combo_en_save, KS KA KV, 60, 356, 0)
CYCLE_COMBO(combo_en_user, KU KR KDUP, 80, 357, 0)
CYCLE_COMBO(combo_en_admin, KA KD KM, 60, 358, 0)
CYCLE_COMBO(combo_en_deploy, KD KE KY, 60, 359, 0)
CYCLE_COMBO(combo_en_module, KM KO KD, 60, 360, 0)
CYCLE_COMBO(combo_en_fail, KF KA KI, 60, 361, 0)
CYCLE_COMBO(combo_en_music, KM KU KS KI, 80, 362, 0)
CYCLE_COMBO(combo_en_consider, KC KN KD, 60, 363, 0)
CYCLE_COMBO(combo_en_appear, KA KP KDUP, 80, 364, 0)
CYCLE_COMBO(combo_en_buy, KB KU KY, 60, 365, 0)
CYCLE_COMBO(combo_en_probably, KP KR KO KY, 80, 366, 0)
CYCLE_COMBO(combo_en_human, KH KU KA, 60, 367, 0)
CYCLE_COMBO(combo_en_wait, KW KA KI, 60, 368, 0)
CYCLE_COMBO(combo_en_serve, KS KV KDUP, 80, 369, 0)
CYCLE_COMBO(combo_en_market, KM KR KQ, 60, 370, 0)
CYCLE_COMBO(combo_en_die, KD KI KDUP, 80, 371, 0)
CYCLE_COMBO(combo_en_send, KS KE KN KD, 80, 372, 0)
CYCLE_COMBO(combo_en_expect, KE KX KP, 60, 373, 0)
CYCLE_COMBO(combo_en_sense, KS KE KN, 60, 374, 0)
CYCLE_COMBO(combo_en_build, KB KU KI, 60, 375, 0)
CYCLE_COMBO(combo_en_stay, KS KT KDUP, 80, 376, 0)
CYCLE_COMBO(combo_en_fall, KF KA KL, 60, 377, 0)
CYCLE_COMBO(combo_en_plan, KP KA KN, 60, 378, 0)
CYCLE_COMBO(combo_en_cut, KC KU KT, 60, 379, 0)
CYCLE_COMBO(combo_en_interest, KI KN KT KE, 80, 380, 0)
CYCLE_COMBO(combo_en_death, KD KE KA KH, 80, 381, 0)
CYCLE_COMBO(combo_en_course, KC KO KR, 60, 382, 0)
CYCLE_COMBO(combo_en_someone, KS KO KE, 60, 383, 0)
CYCLE_COMBO(combo_en_experience, KE KX KC, 60, 384, 0)
CYCLE_COMBO(combo_en_behind, KB KE KH, 60, 385, 0)
CYCLE_COMBO(combo_en_reach, KR KA KH, 60, 386, 0)
CYCLE_COMBO(combo_en_local, KL KO KC, 60, 387, 0)

    };

    behaviors {
        cyc_wrk: cycle_work_working {
            compatible = "chord-cycle,behavior-cycle-string";
            #binding-cells = <1>; // Behavior now takes 1 parameter (list index)
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        #ifdef BT_DISC_CMD
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
        #endif
    };

    macros {
        post_chord_dot: post_chord_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp BSPC &kp DOT &kp SPC>; // Remove layer change
        };
        post_chord_comma: post_chord_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp BSPC &kp COMMA &kp SPC>; // Remove layer change
        };
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        #ifdef BT_DISC_CMD
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };
        #else
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };
        #endif
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA {
            bindings = <
                &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                     &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
                &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                     &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
                &kp TAB     &kp Q    &kp W     &kp F      &kp P   &kp B                                                                      &kp J   &kp L      &kp U     &kp Y  &kp SEMI   &kp LBKT
                &kp ESC     &kp A    &kp R     &kp S      &kp T   &kp G                                                                      &kp M   &kp N      &kp E     &kp I     &kp O    &kp SQT
                &kp GRAVE     &kp Z    &kp X     &kp C      &kp D   &kp V  &kp LCTRL   &kp LALT  &kp LGUI    &caps_word     &mo SYM  &sk RSHFT   &kp K   &kp H  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
                &magic MAGIC 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT            &kp RET  &kp SPACE   &mo SWEDISH_CHORDS  &kp LC(BSPC)  &kp BSPC      &mo NUM          &kp UP   &kp DOWN  &kp BSPC  &kp K_PP  &kp PG_DN
            >;
        };

        SWEDISH_CHORDS {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &post_chord_comma  &post_chord_dot &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &none     &none          &none         &none  &none &none   
            >;
        };

        SYM {
            bindings = <
                &none                &none       &none       &none        &none                                                                                        &none          &none         &none         &none   &none
                &none                &none       &none       &none        &none                &none                                                       &none       &none          &none         &none         &none   &none
                &none           &kp LS(N1)  &kp LS(N2)  &kp LS(N3)   &kp RA(N5)           &kp LS(N5)                                                  &kp LS(N6)  &kp LS(N7)     &kp LS(N0)     &kp MINUS         &none   &none
                &none      &kp NON_US_BSLH  &kp RA(N7)  &kp RA(N8)  &kp KP_LPAR  &kp RA(NON_US_BSLH)                                                    &kp BSLH  &kp RA(N2)  &kp LS(MINUS)  &kp LS(PIPE)  &kp LS(RBKT)   &none
                &none  &kp LS(NON_US_BSLH)  &kp RA(N0)  &kp RA(N9)  &kp KP_RPAR        &kp RA(MINUS)  &trans  &trans  &trans  &trans  &trans  &trans    &kp FSLH  &kp RA(N4)  &kp LS(EQUAL)     &kp EQUAL  &kp RA(RBKT)   &none
                &none                &none       &none       &none        &none                       &trans  &trans  &trans  &trans  &trans  &trans                   &none          &none        &trans         &none   &none
            >;
        };

        NUM {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none    &kp K_PREV    &kp K_PP    &kp K_NEXT   &none                                                   &none   &kp C_BRI_DN  &kp C_BRI_UP   &none   &none   &none
                &none  &kp N1        &kp N2      &kp N3        &kp N4  &kp N5                                                  &kp N6         &kp N7        &kp N8  &kp N9  &kp N0   &none
                &none   &none  &kp K_VOL_DN  &kp K_MUTE  &kp K_VOL_UP   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none  &kp LA(SPACE)         &none   &none   &none   &none
                &none   &none         &none       &none         &none          &trans  &trans  &trans  &trans  &trans  &trans                  &none         &none  &trans   &none   &none
            >;
        };


        MAGIC {
            bindings = <
                &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
                &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
                &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
                &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
                &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
                &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        POST_CHORD_LAYER {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &post_chord_comma  &post_chord_dot &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &none     &none          &none         &none  &none &none   
            >;
        };

    };
};
