/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


#define KSFT 57
#define KDOT 60
#define KCOMMA 61
#define KA 35
#define KB 27
#define KC 49
#define KD 50
#define KE 42
#define KF 25
#define KG 39
#define KH 59
#define KI 43
#define KJ 28
#define KK 58
#define KL 29
#define KM 40
#define KN 41
#define KO 44
#define KAUML 45
#define KP 26
#define KQ 23
#define KR 36
#define KS 37
#define KT 38
#define KU 30
#define KV 51
#define KW 24
#define KX 48
#define KY 31
#define KOUML 32
#define KARING 33
#define KZ 47
#define KSPACE 70
#define KDUP 74
#define KAPOS 999999

/* Automatically generated layer name #define */
#define ALPHA 0
#define SWEDISH_CHORDS 1
#define SYM 2
#define NUM 3
#define MAGIC 4
#define POST_CHORD_LAYER 5

/* On demand includes */
#include "chords.keymap" // Include the generated chord definitions


/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* #define for key positions */
#define POS_LH_T2 53
#define POS_LH_T1 52
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79


&sk {
    release-after-ms = <2000>;
    quick-release;
};

#define CYCLE_COMBO(name, keys, tout, idx, lays) \
    name { \
        timeout-ms = <tout>; \
        key-positions = <keys>; \
        bindings = <&cyc_wrk idx>; \
        layers = <lays>;  \
    };

/ {
    combos {
        compatible = "zmk,combos";
        CYCLE_COMBO(combo_en_the, KT KH KE, 50, 0, 0)
        CYCLE_COMBO(combo_en_be, KB KE, 50, 1, 0)
        CYCLE_COMBO(combo_en_is, KI KS, 50, 2, 0)
        CYCLE_COMBO(combo_en_are, KA KR KE, 50, 3, 0)
        CYCLE_COMBO(combo_en_was, KW KA KS, 50, 4, 0)
        CYCLE_COMBO(combo_en_were, KA KR KS KT KN KE KO KI, 50, 5, 0)
        CYCLE_COMBO(combo_en_and, KA KN KD, 50, 6, 0)
        CYCLE_COMBO(combo_en_a, KA KDUP, 50, 7, 0)
        CYCLE_COMBO(combo_en_of, KO KF, 50, 8, 0)
        CYCLE_COMBO(combo_en_to, KT KO, 50, 9, 0)
        CYCLE_COMBO(combo_en_in, KI KN, 50, 10, 0)
        CYCLE_COMBO(combo_en_i, KI KDUP, 50, 11, 0)
        CYCLE_COMBO(combo_en_you, KY KU, 50, 12, 0)
        CYCLE_COMBO(combo_en_it, KI KT, 50, 13, 0)
        CYCLE_COMBO(combo_en_have, KH KA KV, 50, 14, 0)
        CYCLE_COMBO(combo_en_that, KT KH KA, 50, 15, 0)
        CYCLE_COMBO(combo_en_for, KF KO KR, 50, 16, 0)
        CYCLE_COMBO(combo_en_do, KD KO, 50, 17, 0)
        CYCLE_COMBO(combo_en_he, KH KE, 50, 18, 0)
        CYCLE_COMBO(combo_en_with, KW KI KT, 50, 19, 0)
        CYCLE_COMBO(combo_en_on, KO KN, 50, 20, 0)
        CYCLE_COMBO(combo_en_this, KT KH KI, 50, 21, 0)
        CYCLE_COMBO(combo_en_we, KW KE, 50, 22, 0)
        CYCLE_COMBO(combo_en_not, KN KO KT, 50, 23, 0)
        CYCLE_COMBO(combo_en_but, KB KU, 50, 24, 0)
        CYCLE_COMBO(combo_en_they, KT KH KY, 50, 25, 0)
        CYCLE_COMBO(combo_en_say, KS KA KY, 50, 26, 0)
        CYCLE_COMBO(combo_en_at, KA KT, 50, 27, 0)
        CYCLE_COMBO(combo_en_what, KW KH KA, 50, 28, 0)
        CYCLE_COMBO(combo_en_from, KF KR KO, 50, 29, 0)
        CYCLE_COMBO(combo_en_go, KG KO, 50, 30, 0)
        CYCLE_COMBO(combo_en_or, KO KR, 50, 31, 0)
        CYCLE_COMBO(combo_en_by, KB KY, 50, 32, 0)
        CYCLE_COMBO(combo_en_get, KG KE KDUP, 50, 33, 0)
        CYCLE_COMBO(combo_en_she, KS KH KE, 50, 34, 0)
        CYCLE_COMBO(combo_en_can, KC KA KN, 50, 35, 0)
        CYCLE_COMBO(combo_en_as, KA KS, 50, 36, 0)
        CYCLE_COMBO(combo_en_know, KK KO KW, 50, 37, 0)
        CYCLE_COMBO(combo_en_if, KI KF, 50, 38, 0)
        CYCLE_COMBO(combo_en_me, KM KE, 50, 11, 0)
        CYCLE_COMBO(combo_en_your, KY KU KR, 50, 12, 0)
        CYCLE_COMBO(combo_en_all, KA KL, 50, 39, 0)
        CYCLE_COMBO(combo_en_who, KW KH KO, 50, 40, 0)
        CYCLE_COMBO(combo_en_about, KA KB KO, 50, 41, 0)
        CYCLE_COMBO(combo_en_will, KW KI KL, 50, 42, 0)
        CYCLE_COMBO(combo_en_so, KS KO, 50, 43, 0)
        CYCLE_COMBO(combo_en_would, KW KO KU, 50, 44, 0)
        CYCLE_COMBO(combo_en_make, KM KQ, 50, 45, 0)
        CYCLE_COMBO(combo_en_just, KJ KU KS, 50, 46, 0)
        CYCLE_COMBO(combo_en_up, KU KP, 50, 47, 0)
        CYCLE_COMBO(combo_en_think, KT KI KK, 50, 48, 0)
        CYCLE_COMBO(combo_en_time, KT KI KM, 50, 49, 0)
        CYCLE_COMBO(combo_en_there, KT KH KR, 50, 50, 0)
        CYCLE_COMBO(combo_en_see, KS KE, 50, 51, 0)
        CYCLE_COMBO(combo_en_out, KO KU KT, 50, 52, 0)
        CYCLE_COMBO(combo_en_one, KO KN KE, 50, 53, 0)
        CYCLE_COMBO(combo_en_come, KC KO KM, 50, 54, 0)
        CYCLE_COMBO(combo_en_people, KP KE KO, 50, 55, 0)
        CYCLE_COMBO(combo_en_take, KT KA KK, 50, 56, 0)
        CYCLE_COMBO(combo_en_year, KY KE KA, 50, 57, 0)
        CYCLE_COMBO(combo_en_him, KH KI KDUP, 50, 18, 0)
        CYCLE_COMBO(combo_en_them, KT KE KM, 50, 25, 0)
        CYCLE_COMBO(combo_en_some, KS KO KM, 50, 58, 0)
        CYCLE_COMBO(combo_en_want, KW KA KN, 50, 59, 0)
        CYCLE_COMBO(combo_en_how, KH KO KW, 50, 60, 0)
        CYCLE_COMBO(combo_en_when, KW KH KE, 50, 61, 0)
        CYCLE_COMBO(combo_en_which, KW KH KI, 50, 62, 0)
        CYCLE_COMBO(combo_en_now, KN KO KW, 50, 63, 0)
        CYCLE_COMBO(combo_en_like, KL KI KQ, 50, 64, 0)
        CYCLE_COMBO(combo_en_other, KO KT KH, 50, 65, 0)
        CYCLE_COMBO(combo_en_our, KO KU KR, 50, 22, 0)
        CYCLE_COMBO(combo_en_into, KI KN KT, 50, 66, 0)
        CYCLE_COMBO(combo_en_here, KH KE KR, 50, 67, 0)
        CYCLE_COMBO(combo_en_then, KT KE KN, 50, 68, 0)
        CYCLE_COMBO(combo_en_than, KT KA KN, 50, 69, 0)
        CYCLE_COMBO(combo_en_look, KL KO KQ, 50, 70, 0)
        CYCLE_COMBO(combo_en_way, KW KA KY, 50, 71, 0)
        CYCLE_COMBO(combo_en_more, KM KO KR, 50, 72, 0)
        CYCLE_COMBO(combo_en_these, KT KE KS, 50, 73, 0)
        CYCLE_COMBO(combo_en_no, KN KO, 50, 74, 0)
        CYCLE_COMBO(combo_en_thing, KT KH KI, 50, 75, 0)
        CYCLE_COMBO(combo_en_well, KW KE KL, 50, 76, 0)
        CYCLE_COMBO(combo_en_because, KB KE KC, 50, 77, 0)
        CYCLE_COMBO(combo_en_also, KA KL KS, 50, 78, 0)
        CYCLE_COMBO(combo_en_two, KT KW KO, 50, 79, 0)
        CYCLE_COMBO(combo_en_use, KU KS, 50, 80, 0)
        CYCLE_COMBO(combo_en_tell, KT KE KL, 50, 81, 0)
        CYCLE_COMBO(combo_en_good, KG KO KDUP, 50, 82, 0)
        CYCLE_COMBO(combo_en_first, KF KI KR, 50, 83, 0)
        CYCLE_COMBO(combo_en_man, KM KA KDUP, 50, 84, 0)
        CYCLE_COMBO(combo_en_day, KD KA KY, 50, 85, 0)
        CYCLE_COMBO(combo_en_find, KF KI KN, 50, 86, 0)
        CYCLE_COMBO(combo_en_give, KG KI KE, 50, 87, 0)
        CYCLE_COMBO(combo_en_new, KN KE KW, 50, 88, 0)
        CYCLE_COMBO(combo_en_us, KU KS, 50, 22, 0)
        CYCLE_COMBO(combo_en_any, KA KN KY, 50, 89, 0)
        CYCLE_COMBO(combo_en_those, KT KH KO, 50, 90, 0)
        CYCLE_COMBO(combo_en_very, KV KE KR, 50, 91, 0)
        CYCLE_COMBO(combo_en_need, KN KE KD, 50, 92, 0)
        CYCLE_COMBO(combo_en_back, KB KA KK, 50, 93, 0)
        CYCLE_COMBO(combo_en_should, KS KH KO, 50, 94, 0)
        CYCLE_COMBO(combo_en_even, KE KV KN, 50, 95, 0)
        CYCLE_COMBO(combo_en_only, KO KL KY, 50, 96, 0)
        CYCLE_COMBO(combo_en_many, KM KA KDUP, 50, 97, 0)
        CYCLE_COMBO(combo_en_really, KR KL KY, 50, 98, 0)
        CYCLE_COMBO(combo_en_work, KW KO KK, 50, 99, 0)
        CYCLE_COMBO(combo_en_life, KL KI KF, 50, 100, 0)
        CYCLE_COMBO(combo_en_why, KW KH KY, 50, 101, 0)
        CYCLE_COMBO(combo_en_right, KR KI KG, 50, 102, 0)
        CYCLE_COMBO(combo_en_down, KD KO KW, 50, 103, 0)
        CYCLE_COMBO(combo_en_try, KT KR KY, 50, 104, 0)
        CYCLE_COMBO(combo_en_let, KL KE KT, 50, 105, 0)
        CYCLE_COMBO(combo_en_something, KS KO KE, 50, 106, 0)
        CYCLE_COMBO(combo_en_too, KT KO, 50, 107, 0)
        CYCLE_COMBO(combo_en_call, KC KA KL, 50, 108, 0)
        CYCLE_COMBO(combo_en_woman, KW KO KM, 50, 109, 0)
        CYCLE_COMBO(combo_en_may, KM KA KY, 50, 110, 0)
        CYCLE_COMBO(combo_en_still, KS KT KI, 50, 111, 0)
        CYCLE_COMBO(combo_en_through, KT KH KR, 50, 112, 0)
        CYCLE_COMBO(combo_en_mean, KM KE KA, 50, 113, 0)
        CYCLE_COMBO(combo_en_after, KA KF KT, 50, 114, 0)
        CYCLE_COMBO(combo_en_never, KN KE KV, 50, 115, 0)
        CYCLE_COMBO(combo_en_world, KW KO KD, 50, 116, 0)
        CYCLE_COMBO(combo_en_feel, KF KE KL, 50, 117, 0)
        CYCLE_COMBO(combo_en_great, KG KR KE, 50, 118, 0)
        CYCLE_COMBO(combo_en_last, KL KA KS, 50, 119, 0)
        CYCLE_COMBO(combo_en_child, KC KH KI, 50, 120, 0)
        CYCLE_COMBO(combo_en_oh, KO KH, 50, 121, 0)
        CYCLE_COMBO(combo_en_ah, KA KH, 50, 122, 0)
        CYCLE_COMBO(combo_en_over, KO KV KE, 50, 123, 0)
        CYCLE_COMBO(combo_en_ask, KA KS KK, 50, 124, 0)
        CYCLE_COMBO(combo_en_state, KS KT KA, 50, 125, 0)
        CYCLE_COMBO(combo_en_much, KM KU KC, 50, 126, 0)
        CYCLE_COMBO(combo_en_talk, KT KA KL, 50, 127, 0)
        CYCLE_COMBO(combo_en_keep, KK KE KP, 50, 128, 0)
        CYCLE_COMBO(combo_en_leave, KL KE KA, 50, 129, 0)
        CYCLE_COMBO(combo_en_put, KP KU KDUP, 50, 130, 0)
        CYCLE_COMBO(combo_en_help, KH KE KP, 50, 131, 0)
        CYCLE_COMBO(combo_en_big, KB KI KDUP, 50, 132, 0)
        CYCLE_COMBO(combo_en_where, KW KH KE, 50, 133, 0)
        CYCLE_COMBO(combo_en_same, KS KA KM, 50, 134, 0)
        CYCLE_COMBO(combo_en_own, KO KW KN, 50, 135, 0)
        CYCLE_COMBO(combo_en_while, KW KH KI, 50, 136, 0)
        CYCLE_COMBO(combo_en_start, KS KT KA, 50, 137, 0)
        CYCLE_COMBO(combo_en_three, KT KH KR, 50, 138, 0)
        CYCLE_COMBO(combo_en_high, KH KI KG, 50, 139, 0)
        CYCLE_COMBO(combo_en_every, KE KV KR, 50, 140, 0)
        CYCLE_COMBO(combo_en_another, KA KN KO, 50, 141, 0)
        CYCLE_COMBO(combo_en_become, KB KE KC, 50, 142, 0)
        CYCLE_COMBO(combo_en_most, KM KO KS, 50, 143, 0)
        CYCLE_COMBO(combo_en_between, KB KE KW, 50, 144, 0)
        CYCLE_COMBO(combo_en_happen, KH KA KP, 50, 145, 0)
        CYCLE_COMBO(combo_en_family, KF KA KM, 50, 146, 0)
        CYCLE_COMBO(combo_en_old, KO KL KD, 50, 147, 0)
        CYCLE_COMBO(combo_en_yes, KY KE KS, 50, 148, 0)
        CYCLE_COMBO(combo_en_house, KH KO KU, 50, 149, 0)
        CYCLE_COMBO(combo_en_show, KS KH KO, 50, 150, 0)
        CYCLE_COMBO(combo_en_again, KA KG KI, 50, 151, 0)
        CYCLE_COMBO(combo_en_student, KS KT KU, 50, 152, 0)
        CYCLE_COMBO(combo_en_seem, KS KE KM, 50, 153, 0)
        CYCLE_COMBO(combo_en_might, KM KI KG, 50, 154, 0)
        CYCLE_COMBO(combo_en_part, KP KA KR, 50, 155, 0)
        CYCLE_COMBO(combo_en_hear, KH KE KA, 50, 156, 0)
        CYCLE_COMBO(combo_en_its, KI KT KS, 50, 13, 0)
        CYCLE_COMBO(combo_en_place, KP KL KA, 50, 157, 0)
        CYCLE_COMBO(combo_en_problem, KP KR KO, 50, 158, 0)
        CYCLE_COMBO(combo_en_believe, KB KE KL, 50, 159, 0)
        CYCLE_COMBO(combo_en_country, KC KO KU, 50, 160, 0)
        CYCLE_COMBO(combo_en_always, KA KL KW, 50, 161, 0)
        CYCLE_COMBO(combo_en_week, KW KE KK, 50, 162, 0)
        CYCLE_COMBO(combo_en_point, KP KO KI, 50, 163, 0)
        CYCLE_COMBO(combo_en_hand, KH KA KD, 50, 164, 0)
        CYCLE_COMBO(combo_en_off, KO KF, 50, 165, 0)
        CYCLE_COMBO(combo_en_play, KP KL KA, 50, 166, 0)
        CYCLE_COMBO(combo_en_turn, KT KU KR, 50, 167, 0)
        CYCLE_COMBO(combo_en_few, KF KE KW, 50, 168, 0)
        CYCLE_COMBO(combo_en_group, KG KR KO, 50, 169, 0)
        CYCLE_COMBO(combo_en_such, KS KU KH, 50, 170, 0)
        CYCLE_COMBO(combo_en_fact, KF KA KT, 50, 171, 0)
        CYCLE_COMBO(combo_en_against, KA KG KI, 50, 172, 0)
        CYCLE_COMBO(combo_en_case, KC KA KE, 50, 173, 0)
        CYCLE_COMBO(combo_en_around, KA KR KO, 50, 174, 0)
        CYCLE_COMBO(combo_en_company, KC KO KM, 50, 175, 0)
        CYCLE_COMBO(combo_en_system, KS KY KT, 50, 176, 0)
        CYCLE_COMBO(combo_en_each, KE KA KC, 50, 177, 0)
        CYCLE_COMBO(combo_en_program, KP KR KO, 50, 178, 0)
        CYCLE_COMBO(combo_en_question, KQ KU KS, 50, 179, 0)
        CYCLE_COMBO(combo_en_during, KD KU KR, 50, 180, 0)
        CYCLE_COMBO(combo_en_run, KR KU KN, 50, 181, 0)
        CYCLE_COMBO(combo_en_small, KS KM KA, 50, 182, 0)
        CYCLE_COMBO(combo_en_number, KN KU KB, 50, 183, 0)
        CYCLE_COMBO(combo_en_move, KM KO KV, 50, 184, 0)
        CYCLE_COMBO(combo_en_night, KN KI KG, 50, 185, 0)
        CYCLE_COMBO(combo_en_live, KL KI KV, 50, 186, 0)
        CYCLE_COMBO(combo_en_hold, KH KO KD, 50, 187, 0)
        CYCLE_COMBO(combo_en_today, KT KO KY, 50, 188, 0)
        CYCLE_COMBO(combo_en_bring, KB KR KI, 50, 189, 0)
        CYCLE_COMBO(combo_en_next, KN KE KX, 50, 190, 0)
        CYCLE_COMBO(combo_en_without, KW KI KT, 50, 191, 0)
        CYCLE_COMBO(combo_en_before, KB KE KF, 50, 192, 0)
        CYCLE_COMBO(combo_en_large, KL KA KR, 50, 193, 0)
        CYCLE_COMBO(combo_en_must, KM KU KS, 50, 194, 0)
        CYCLE_COMBO(combo_en_home, KH KO KE, 50, 195, 0)
        CYCLE_COMBO(combo_en_under, KU KN KD, 50, 196, 0)
        CYCLE_COMBO(combo_en_water, KW KA KT, 50, 197, 0)
        CYCLE_COMBO(combo_en_room, KR KO KM, 50, 198, 0)
        CYCLE_COMBO(combo_en_write, KW KI KE, 50, 199, 0)
        CYCLE_COMBO(combo_en_area, KA KR KDUP, 50, 200, 0)
        CYCLE_COMBO(combo_en_national, KN KA KT, 50, 201, 0)
        CYCLE_COMBO(combo_en_money, KM KO KY, 50, 202, 0)
        CYCLE_COMBO(combo_en_story, KS KT KO, 50, 203, 0)
        CYCLE_COMBO(combo_en_young, KY KN KG, 50, 204, 0)
        CYCLE_COMBO(combo_en_month, KM KO KT, 50, 205, 0)
        CYCLE_COMBO(combo_en_different, KD KI KF, 50, 206, 0)
        CYCLE_COMBO(combo_en_lot, KL KO KT, 50, 207, 0)
        CYCLE_COMBO(combo_en_study, KS KT KU, 50, 208, 0)
        CYCLE_COMBO(combo_en_book, KB KO KQ, 50, 209, 0)
        CYCLE_COMBO(combo_en_job, KJ KO KB, 50, 210, 0)
        CYCLE_COMBO(combo_en_word, KW KO KD, 50, 211, 0)
        CYCLE_COMBO(combo_en_though, KT KH KU, 50, 212, 0)
        CYCLE_COMBO(combo_en_business, KB KU KS, 50, 213, 0)
        CYCLE_COMBO(combo_en_issue, KI KS KU, 50, 214, 0)
        CYCLE_COMBO(combo_en_side, KS KI KD, 50, 215, 0)
        CYCLE_COMBO(combo_en_kind, KK KI KD, 50, 216, 0)
        CYCLE_COMBO(combo_en_four, KF KO KU, 50, 217, 0)
        CYCLE_COMBO(combo_en_head, KH KE KA, 50, 218, 0)
        CYCLE_COMBO(combo_en_far, KF KA KDUP, 50, 219, 0)
        CYCLE_COMBO(combo_en_black, KB KL KA, 50, 220, 0)
        CYCLE_COMBO(combo_en_long, KL KO KG, 50, 221, 0)
        CYCLE_COMBO(combo_en_both, KB KO KH, 50, 222, 0)
        CYCLE_COMBO(combo_en_little, KL KI KT, 50, 223, 0)
        CYCLE_COMBO(combo_en_since, KS KI KN, 50, 224, 0)
        CYCLE_COMBO(combo_en_provide, KP KR KO, 50, 225, 0)
        CYCLE_COMBO(combo_en_service, KS KE KR, 50, 226, 0)
        CYCLE_COMBO(combo_en_friend, KF KR KI, 50, 227, 0)
        CYCLE_COMBO(combo_en_important, KI KM KP, 50, 228, 0)
        CYCLE_COMBO(combo_en_father, KF KA KT, 50, 229, 0)
        CYCLE_COMBO(combo_en_sit, KS KI KT, 50, 230, 0)
        CYCLE_COMBO(combo_en_away, KA KW KY, 50, 231, 0)
        CYCLE_COMBO(combo_en_until, KU KN KT, 50, 232, 0)
        CYCLE_COMBO(combo_en_power, KP KO KW, 50, 233, 0)
        CYCLE_COMBO(combo_en_hour, KH KO KU, 50, 234, 0)
        CYCLE_COMBO(combo_en_game, KG KA KM, 50, 235, 0)
        CYCLE_COMBO(combo_en_often, KO KF KT, 50, 236, 0)
        CYCLE_COMBO(combo_en_yet, KY KE KT, 50, 237, 0)
        CYCLE_COMBO(combo_en_line, KL KI KE, 50, 238, 0)
        CYCLE_COMBO(combo_en_end, KE KN KD, 50, 239, 0)
        CYCLE_COMBO(combo_en_among, KA KM KO, 50, 240, 0)
        CYCLE_COMBO(combo_en_ever, KE KV KR, 50, 241, 0)
        CYCLE_COMBO(combo_en_stand, KS KT KA, 50, 242, 0)
        CYCLE_COMBO(combo_en_bad, KB KA KDUP, 50, 243, 0)
        CYCLE_COMBO(combo_en_lose, KL KO KS, 50, 244, 0)
        CYCLE_COMBO(combo_en_however, KH KO KV, 50, 245, 0)
        CYCLE_COMBO(combo_en_member, KM KE KB, 50, 246, 0)
        CYCLE_COMBO(combo_en_pay, KP KA KY, 50, 247, 0)
        CYCLE_COMBO(combo_en_law, KL KA KU, 50, 248, 0)
        CYCLE_COMBO(combo_en_meet, KM KE KT, 50, 249, 0)
        CYCLE_COMBO(combo_en_car, KC KA KR, 50, 250, 0)
        CYCLE_COMBO(combo_en_city, KC KI KT, 50, 251, 0)
        CYCLE_COMBO(combo_en_almost, KA KL KO, 50, 252, 0)
        CYCLE_COMBO(combo_en_include, KI KN KC, 50, 253, 0)
        CYCLE_COMBO(combo_en_continue, KC KO KN, 50, 254, 0)
        CYCLE_COMBO(combo_en_set, KS KE KT, 50, 255, 0)
        CYCLE_COMBO(combo_en_later, KL KA KT, 50, 256, 0)
        CYCLE_COMBO(combo_en_community, KC KO KM, 50, 257, 0)
        CYCLE_COMBO(combo_en_name, KN KA KE, 50, 258, 0)
        CYCLE_COMBO(combo_en_five, KF KI KV, 50, 259, 0)
        CYCLE_COMBO(combo_en_once, KO KN KC, 50, 260, 0)
        CYCLE_COMBO(combo_en_white, KW KH KI, 50, 261, 0)
        CYCLE_COMBO(combo_en_least, KL KE KA, 50, 223, 0)
    };

    behaviors {
        cyc_wrk: cycle_work_working {
            compatible = "chord-cycle,behavior-cycle-string";
            #binding-cells = <1>; // Behavior now takes 1 parameter (list index)
        };

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        #ifdef BT_DISC_CMD
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
        #endif
    };

    macros {
        post_chord_dot: post_chord_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp BSPC &kp DOT &kp SPC>; // Remove layer change
        };
        post_chord_comma: post_chord_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp BSPC &kp COMMA &kp SPC>; // Remove layer change
        };
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        #ifdef BT_DISC_CMD
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };
        #else
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };
        #endif
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA {
            bindings = <
                &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                     &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
                &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                     &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
                &kp TAB     &kp Q    &kp W     &kp F      &kp P   &kp B                                                                      &kp J   &kp L      &kp U     &kp Y  &kp SEMI   &kp LBKT
                &kp ESC     &kp A    &kp R     &kp S      &kp T   &kp G                                                                      &kp M   &kp N      &kp E     &kp I     &kp O    &kp SQT
                &kp GRAVE     &kp Z    &kp X     &kp C      &kp D   &kp V  &kp LCTRL   &kp LALT  &kp LGUI    &caps_word     &mo SYM  &sk RSHFT   &kp K   &kp H  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
                &magic MAGIC 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT            &kp RET  &kp SPACE   &mo SWEDISH_CHORDS  &kp LC(BSPC)  &kp BSPC      &mo NUM          &kp UP   &kp DOWN  &kp BSPC  &kp K_PP  &kp PG_DN
            >;
        };

        SWEDISH_CHORDS {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &post_chord_comma  &post_chord_dot &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &none     &none          &none         &none  &none &none   
            >;
        };

        SYM {
            bindings = <
                &none                &none       &none       &none        &none                                                                                        &none          &none         &none         &none   &none
                &none                &none       &none       &none        &none                &none                                                       &none       &none          &none         &none         &none   &none
                &none           &kp LS(N1)  &kp LS(N2)  &kp LS(N3)   &kp RA(N5)           &kp LS(N5)                                                  &kp LS(N6)  &kp LS(N7)     &kp LS(N0)     &kp MINUS         &none   &none
                &none      &kp NON_US_BSLH  &kp RA(N7)  &kp RA(N8)  &kp KP_LPAR  &kp RA(NON_US_BSLH)                                                    &kp BSLH  &kp RA(N2)  &kp LS(MINUS)  &kp LS(PIPE)  &kp LS(RBKT)   &none
                &none  &kp LS(NON_US_BSLH)  &kp RA(N0)  &kp RA(N9)  &kp KP_RPAR        &kp RA(MINUS)  &trans  &trans  &trans  &trans  &trans  &trans    &kp FSLH  &kp RA(N4)  &kp LS(EQUAL)     &kp EQUAL  &kp RA(RBKT)   &none
                &none                &none       &none       &none        &none                       &trans  &trans  &trans  &trans  &trans  &trans                   &none          &none        &trans         &none   &none
            >;
        };

        NUM {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none    &kp K_PREV    &kp K_PP    &kp K_NEXT   &none                                                   &none   &kp C_BRI_DN  &kp C_BRI_UP   &none   &none   &none
                &none  &kp N1        &kp N2      &kp N3        &kp N4  &kp N5                                                  &kp N6         &kp N7        &kp N8  &kp N9  &kp N0   &none
                &none   &none  &kp K_VOL_DN  &kp K_MUTE  &kp K_VOL_UP   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none  &kp LA(SPACE)         &none   &none   &none   &none
                &none   &none         &none       &none         &none          &trans  &trans  &trans  &trans  &trans  &trans                  &none         &none  &trans   &none   &none
            >;
        };


        MAGIC {
            bindings = <
                &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
                &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
                &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
                &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
                &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
                &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        POST_CHORD_LAYER {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &post_chord_comma  &post_chord_dot &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &none     &none          &none         &none  &none &none   
            >;
        };

    };
};
