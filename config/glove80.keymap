/*
* Copyright (c) 2020 The ZMK Contributors
* Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
*
* SPDX-License-Identifier: MIT
*/


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
*
* This file was generated automatically. You may or may not want to
* edit it directly.
*/

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>


#define KSFT 57
#define KDOT 60
#define KCOMMA 61
#define KMINUS 62
#define KA 35
#define KB 27
#define KC 49
#define KD 50
#define KE 42
#define KF 25
#define KG 39
#define KH 59
#define KI 43
#define KJ 28
#define KK 58
#define KL 29
#define KM 40
#define KN 41
#define KO 44
#define KAUML 45
#define KP 26
#define KQ 23
#define KR 36
#define KS 37
#define KT 38
#define KU 30
#define KV 51
#define KW 24
#define KX 48
#define KY 31
#define KOUML 32
#define KARING 33
#define KZ 47
#define KSPACE 70
#define KDUP 74
#define KAPOS 999999

/* Automatically generated layer name #define */
#define ALPHA 0
#define ENGLISH_CHORDS 1
#define SWEDISH_CHORDS 2
#define SYM 3
#define NUM 4
#define CTRLNUM 5
#define ALTNUM 6
#define MAGIC 7

/* On demand includes */
#include "chords.keymap" // Include the generated chord definitions


/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* #define for key positions */
#define POS_LH_T2 53
#define POS_LH_T1 52
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79


&sk {
    release-after-ms = <2000>;
    quick-release;
};

&mt {
    tapping-term-ms = <120>;
};

/ {
    underglow {
        compatible = "zmk,underglow";

        // Optional: default color when no layer is active
        color = <32 32 32>;  // Soft white or dim gray

        // Per-layer colors: layer 1 = green, layer 2 = blue
        layer-colors = <0 255 0>, <0 0 255>;
    };



    behaviors {
         hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < KJ KL KU KY KOUML KM KN KE KI KO KK KH KCOMMA KDOT KMINUS >;
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < KQ KW KF KP KB KA KR KS KT KG KZ KX KC KD KV >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
        /* cyc_wrk: cycle_work_working { */
        /*     compatible = "chord-cycle,behavior-cycle-string"; */
        /*     #binding-cells = <1>; // Behavior now takes 1 parameter (list index) */
        /* }; */

        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <1>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        #ifdef BT_DISC_CMD
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
        #endif
    };

    macros {
        post_chord_dot: post_chord_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp BSPC &kp DOT &kp SPC>; // Remove layer change
        };
        post_chord_comma: post_chord_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp BSPC &kp COMMA &kp SPC>; // Remove layer change
        };
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        #ifdef BT_DISC_CMD
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };
        #else
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };
        #endif
    };

    keymap {
        compatible = "zmk,keymap";

        ALPHA {
            bindings = <
                &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                     &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
                &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                     &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
                &kp TAB     &kp Q    &kp W     &kp F      &kp P   &kp B                                                                      &kp J   &kp L      &kp U     &kp Y  &kp SEMI   &kp LBKT
                &kp ESC     &kp A    &hml LGUI R     &hml LALT S      &hml LCTRL T   &kp G                                                                      &kp M   &hmr LCTRL N      &hmr LALT E     &hmr LGUI I     &kp O    &kp SQT
                &kp GRAVE     &kp Z    &kp X     &kp C      &kp D   &kp V  &kp LCTRL &kp LALT &kp LGUI    &kp LC(A)     &mo SYM  &sk RSHFT   &kp K   &kp H  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
                &magic MAGIC  &kp HOME  &kp END  &kp LEFT  &kp RIGHT            &kp SPACE  &kp RET   &mo ENGLISH_CHORDS  &none  &kp BSPC      &lt NUM LC(BSPC)          &kp UP   &kp DOWN  &kp BSPC  &kp K_PP  &kp PG_DN
            >;
        };

        ENGLISH_CHORDS {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &post_chord_comma  &post_chord_dot &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans     &none          &none         &none  &none &none   
            >;
        };

        SWEDISH_CHORDS {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &post_chord_comma  &post_chord_dot &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans     &none          &none         &none  &none &none   
            >;
        };

        SYM {
            bindings = <
                &none                &none       &none       &none        &none                                                                                        &none          &none         &none         &none   &none
                &none                &none       &none       &none        &none                &none                                                       &none       &none          &none         &none         &none   &none
                &none           &kp LS(N1)  &kp LS(N2)  &kp LS(N3)   &kp RA(N5)           &kp LS(N5)                                                  &kp LS(N6)  &kp LS(N7)     &kp LS(N0)     &kp MINUS         &none   &none
                &none      &kp NON_US_BSLH  &kp RA(N7)  &kp RA(N8)  &kp KP_LPAR  &kp RA(NON_US_BSLH)                                                    &kp BSLH  &kp RA(N2)  &kp LS(MINUS)  &kp LS(PIPE)  &kp LS(RBKT)   &none
                &none  &kp LS(NON_US_BSLH)  &kp RA(N0)  &kp RA(N9)  &kp KP_RPAR        &kp RA(MINUS)  &trans  &trans  &trans  &trans  &trans  &trans    &kp FSLH  &kp RA(N4)  &kp LS(EQUAL)     &kp EQUAL  &kp RA(RBKT)   &none
                &none                &none       &none       &none        &none                       &trans  &trans  &trans  &trans  &trans  &trans                   &none          &none        &trans         &none   &none
            >;
        };

        NUM {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &kp C_RW &none         &kp C_FF &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none    &kp K_PREV    &kp K_PP    &kp K_NEXT   &none                                                   &none   &kp C_BRI_DN  &kp C_BRI_UP   &none   &none   &none
                &none  &kp N1        &kp N2      &kp N3        &kp N4  &kp N5                                                  &kp N6         &kp N7        &kp N8  &kp N9  &kp N0   &none
                &none   &none  &kp K_VOL_DN  &kp K_MUTE  &kp K_VOL_UP   &none  &trans  &trans  &trans  &trans  &trans  &trans   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none          &kp LC(SPACE)  &kp LG(RET)  &trans  &trans  &trans  &trans           &none         &none  &trans   &none   &none
            >;
        };

        CTRLNUM {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none  &kp LC(N1)        &kp LC(N2)      &kp LC(N3)        &kp LC(N4)  &kp LC(N5)                                                  &kp LC(N6)         &kp LC(N7)        &kp LC(N8)  &kp LC(N9)  &kp LC(N0)   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &none  &none &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans     &none          &none         &none  &none &none   
            >;
        };
            

        ALTNUM {
            bindings = <
                &none   &none         &none       &none         &none                                                                          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none   &none         &none       &none         &none   &none                                                   &none          &none         &none   &none   &none   &none
                &none  &kp LA(N1)        &kp LA(N2)      &kp LA(N3)        &kp LA(N4)  &kp LA(N5)                                                  &kp LA(N6)         &kp LA(N7)        &kp LA(N8)  &kp LA(N9)  &kp LA(N0)   &none
                &none   &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans    &none          &none         &none  &none &none   &none   
                &none         &none       &none         &none   &none &trans  &trans  &trans  &trans  &trans  &trans     &none          &none         &none  &none &none   
            >;
        };

        MAGIC {
            bindings = <
                &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
                &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
                &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
                &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
                &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
                &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };
    };
};
