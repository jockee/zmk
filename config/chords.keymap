#define THCHORD(name, tapMacro, holdMacro) \
  name: name { \
    compatible = "zmk,behavior-hold-tap"; \
    #binding-cells = <2>; \
    tapping_term_ms = <200>; \
    quick_tap_ms = <0>; \
    flavor = "tap-preferred"; \
    bindings = <&holdMacro>, <&tapMacro>; \
  };

#define COMBO(name, keypress, keypos) \
  combo_##name { \
    timeout-ms = <60>; \
    bindings = <keypress>; \
    key-positions = <keypos>; \
  };

#define LAYER_CHORD(name, keypress, keypos, lays) \
  chord_##name { \
    timeout-ms = <30>; \
    bindings = <keypress &to ALPHA>; /* Add transition back to ALPHA */ \
    key-positions = <keypos>; \
    layers = <0 1>; /* Use layer indices directly: ALPHA=0, POST_CHORD=1 */ \
  };

// Modified CHORD macro to inline keys
#define CHORD(name, keys, keypos) \
  chord_##name { \
    timeout-ms = <50>; /* Ensure timeout is 50ms */ \
    bindings = <keys &kp SPC &to ALPHA>; /* Inline keys, add space, add transition */ \
    key-positions = <keypos>; \
    layers = <0 1>; /* Use layer indices directly: ALPHA=0, POST_CHORD=1 */ \
  };
 


/ {
  combos {
    compatible = "zmk,combos";
    LAYER_CHORD(ch_excl_s, &kp BSPC &kp EXCL &kp SPC, KS KT, POST_CHORD)
    LAYER_CHORD(ch_excl, &kp EXCL, KS KT, ALPHA SYM NUM)
    LAYER_CHORD(ch_qmark_s, &kp BSPC &kp LS(MINUS) &kp SPC, KI KE, POST_CHORD)
    LAYER_CHORD(ch_qmark, &kp LS(MINUS), KI KE, ALPHA SYM NUM) 
    CHORD(ch_the, &kp T &kp H &kp E, KT KH KE)
    CHORD(ch_i, &kp I, KI KDUP)
    CHORD(ch_be, &kp B &kp E, KB KE)
    CHORD(ch_och, &kp O &kp C &kp H, KO KC KH)
    CHORD(ch_to, &kp T &kp O, KT KO)
    CHORD(ch_att, &kp A &kp T, KA KT KDUP)
    CHORD(ch_of, &kp O &kp F, KO KF)
    CHORD(ch_det, &kp D &kp E, KD KE KDUP)
    CHORD(ch_and, &kp A &kp N &kp D, KA KN KD)
    CHORD(ch_som, &kp S &kp O &kp M, KS KO KM)
    CHORD(ch_a, &kp A, KA KDUP)
    CHORD(ch_en, &kp E &kp N, KE KN)
    CHORD(ch_in, &kp I &kp N, KI KN)
    CHORD(ch_p, &kp P &kp LBKT, KP KARING) // KARING -> LBKT
    CHORD(ch_that, &kp T &kp H &kp A, KT KH KA)
    CHORD(ch_r, &kp SEMI &kp R, KAUML KR) // KAUML -> SEMI
    CHORD(ch_have, &kp H &kp A &kp V, KH KA KV)
    CHORD(ch_av, &kp A &kp V, KA KV)
    CHORD(ch_it, &kp I &kp T, KI KT)
    CHORD(ch_f_r, &kp F &kp SQT &kp R, KF KORING KR) // KORING -> SQT
    CHORD(ch_for, &kp F &kp O &kp R, KF KO KR)
    CHORD(ch_med, &kp M &kp E &kp D, KM KE KD)
    CHORD(ch_not, &kp N &kp O &kp T, KN KO KT)
    CHORD(ch_till, &kp T &kp I &kp L, KT KI KL)
    CHORD(ch_on, &kp O &kp N, KO KN)
    CHORD(ch_den, &kp D &kp E &kp N, KD KE KN)
    CHORD(ch_with, &kp W &kp I &kp T, KW KI KT)
    CHORD(ch_har, &kp H &kp A &kp R, KH KA KR)
    CHORD(ch_he, &kp H &kp E, KH KE)
    CHORD(ch_de, &kp D &kp E, KD KE)
    CHORD(ch_as, &kp A &kp S, KA KS)
    CHORD(ch_inte, &kp I &kp N &kp T, KI KN KT)
    CHORD(ch_you, &kp Y &kp U, KY KU)
    CHORD(ch_om, &kp O &kp M, KO KM)
    CHORD(ch_do, &kp D &kp O, KD KO)
    CHORD(ch_ett, &kp E &kp T, KE KT)
    CHORD(ch_at, &kp A &kp T, KA KT)
    CHORD(ch_han, &kp H &kp A, KH KA KDUP)
    CHORD(ch_this, &kp T &kp H &kp I, KT KH KI)
    CHORD(ch_men, &kp M &kp E, KM KE)
    CHORD(ch_but, &kp B &kp U, KB KU KDUP)
    CHORD(ch_var, &kp V &kp R, KV KR)
    CHORD(ch_his, &kp H &kp I &kp S, KH KI KS)
    CHORD(ch_jag, &kp J &kp A &kp G, KJ KA KG)
    CHORD(ch_by, &kp B &kp Y, KB KY)
    CHORD(ch_sig, &kp S &kp I &kp G, KS KI KG)
    CHORD(ch_from, &kp F &kp R &kp M, KF KR KM)
    CHORD(ch_fr_n, &kp F &kp R &kp N, KF KR KN)
    CHORD(ch_they, &kp T &kp H &kp Y, KT KH KY)
    CHORD(ch_vi, &kp V &kp I, KV KI)
    CHORD(ch_we, &kp W &kp E, KW KE)
    CHORD(ch_s, &kp S &kp LBKT, KS KARING) // KARING -> LBKT
    CHORD(ch_say, &kp S &kp A &kp Y, KS KA KY)
    CHORD(ch_kan, &kp K &kp A, KK KA)
    CHORD(ch_her, &kp H &kp E &kp R, KH KE KR)
    CHORD(ch_man, &kp M &kp A, KM KA KDUP)
    CHORD(ch_she, &kp S &kp H &kp E, KS KH KE)
    CHORD(ch_n_r, &kp N &kp SEMI &kp R, KN KAUML KR) // KAUML -> SEMI
    CHORD(ch_or, &kp O &kp R, KO KR)
    CHORD(ch_r_1, &kp LBKT &kp R, KARING KR) // KARING -> LBKT
    CHORD(ch_an, &kp A &kp N, KA KN)
    CHORD(ch_s_ger, &kp S &kp SEMI &kp G, KS KAUML KG) // KAUML -> SEMI
    CHORD(ch_will, &kp W &kp I &kp L, KW KI KL)
    CHORD(ch_hon, &kp H &kp O, KH KO KDUP)
    CHORD(ch_my, &kp M &kp Y, KM KY)
    CHORD(ch_under, &kp U &kp N &kp D, KU KN KD)
    CHORD(ch_one, &kp O &kp N &kp E, KO KN KE)
    CHORD(ch_ocks, &kp O &kp C &kp K, KO KC KK)
    CHORD(ch_all, &kp A &kp L, KA KL)
    CHORD(ch_efter, &kp E &kp F &kp T, KE KF KT)
    CHORD(ch_would, &kp W &kp O &kp U, KW KO KU)
    CHORD(ch_eller, &kp E &kp L &kp R, KE KL KR)
    CHORD(ch_there, &kp T &kp H &kp R, KT KH KR)
    CHORD(ch_nu, &kp N &kp U, KN KU)
    CHORD(ch_their, &kp T &kp I &kp R, KT KI KR)
    CHORD(ch_sin, &kp S &kp I &kp N, KS KI KN)
    CHORD(ch_what, &kp W &kp H &kp A, KW KH KA)
    CHORD(ch_d_r, &kp D &kp SEMI &kp R, KD KAUML KR) // KAUML -> SEMI
    CHORD(ch_so, &kp S &kp O, KS KO)
    CHORD(ch_vid, &kp V &kp I, KV KI KDUP)
    CHORD(ch_up, &kp U &kp P, KU KP)
    CHORD(ch_mot, &kp M &kp O &kp T, KM KO KT)
    CHORD(ch_out, &kp O &kp U &kp T, KO KU KT)
    CHORD(ch_ska, &kp S &kp K &kp A, KS KK KA)
    CHORD(ch_if, &kp I &kp F, KI KF)
    CHORD(ch_skulle, &kp S &kp K &kp U, KS KK KU)
    CHORD(ch_about, &kp A &kp B &kp O, KA KB KO)
    CHORD(ch_kommer, &kp K &kp O &kp R, KK KO KR)
    CHORD(ch_who, &kp W &kp H &kp O, KW KH KO)
    CHORD(ch_ut, &kp U &kp T, KU KT)
    CHORD(ch_get, &kp G &kp E, KG KE KDUP)
    CHORD(ch_f_r_1, &kp F &kp LBKT &kp R, KF KARING KR) // KARING -> LBKT
    CHORD(ch_which, &kp W &kp H &kp I, KW KH KI)
    CHORD(ch_finns, &kp F &kp I &kp N, KF KI KN)
    CHORD(ch_go, &kp G &kp O, KG KO)
    CHORD(ch_vara, &kp V &kp A &kp R, KV KA KR)
    CHORD(ch_me, &kp M &kp E, KM KE)
    CHORD(ch_tror, &kp T &kp R &kp O, KT KR KO)
    CHORD(ch_when, &kp W &kp H &kp E, KW KH KE)
    CHORD(ch_hade, &kp H &kp D &kp E, KH KD KE)
    CHORD(ch_make, &kp A &kp K &kp E, KA KK KE) // Note: 'make' macro used A K E, not M A K E
    CHORD(ch_alla, &kp A &kp L, KA KL) // Note: 'alla' macro used A L, not A L L A
    CHORD(ch_can, &kp C &kp A &kp N, KC KA KN)
    CHORD(ch_andra, &kp A &kp D &kp R, KA KD KR)
    CHORD(ch_like, &kp L &kp I &kp E, KL KI KE)
    CHORD(ch_mycket, &kp M &kp Y &kp C, KM KY KC)
    CHORD(ch_time, &kp T &kp I &kp M, KT KI KM)
    CHORD(ch_n, &kp SEMI &kp N, KAUML KN) // KAUML -> SEMI
    CHORD(ch_no, &kp N &kp O, KN KO KDUP)
    CHORD(ch_h_r, &kp H &kp SEMI &kp R, KH KAUML KR) // KAUML -> SEMI
    CHORD(ch_just, &kp J &kp U &kp S, KJ KU KS)
    CHORD(ch_d, &kp D &kp LBKT, KD KARING) // KARING -> LBKT
    CHORD(ch_him, &kp H &kp I, KH KI KDUP)
    CHORD(ch_sedan, &kp S &kp E &kp D, KS KE KD)
    CHORD(ch_know, &kp K &kp O &kp W, KK KO KW)
    CHORD(ch_ver, &kp SQT &kp V &kp E, KORING KV KE) // KORING -> SQT
    CHORD(ch_take, &kp T &kp A &kp E, KT KA KE)
    CHORD(ch_bara, &kp B &kp A &kp R, KB KA KR)
    CHORD(ch_people, &kp P &kp E &kp O, KP KE KO)
    CHORD(ch_into, &kp I &kp T &kp O, KI KT KO)
    CHORD(ch_blir, &kp B &kp L &kp R, KB KL KR)
    CHORD(ch_year, &kp Y &kp E &kp A, KY KE KA)
    CHORD(ch_upp, &kp U &kp P, KU KP KDUP)
    CHORD(ch_your, &kp Y &kp U &kp R, KY KU KR)
    CHORD(ch_ven, &kp SEMI &kp V &kp E, KAUML KV KE) // KAUML -> SEMI
    CHORD(ch_good, &kp G &kp O, KG KO KDUP)
    CHORD(ch_vad, &kp V &kp A, KV KA KDUP)
    CHORD(ch_some, &kp O &kp M &kp E, KO KM KE) // Note: 'some' macro used O M E, not S O M E
    CHORD(ch_f, &kp F &kp LBKT, KF KARING) // KARING -> LBKT
    CHORD(ch_could, &kp C &kp O &kp U, KC KO KU)
    CHORD(ch_tv, &kp V &kp LBKT, KV KARING) // KARING -> LBKT
    CHORD(ch_them, &kp T &kp H, KT KH KDUP)
    CHORD(ch_vill, &kp V &kp I &kp L, KV KI KL)
    CHORD(ch_see, &kp S &kp E, KS KE KDUP)
    CHORD(ch_ha, &kp H &kp A, KH KA)
    CHORD(ch_other, &kp O &kp T &kp H, KO KT KH)
    CHORD(ch_m_nga, &kp M &kp LBKT &kp G, KM KARING KG) // KARING -> LBKT
    CHORD(ch_than, &kp T &kp N, KT KN)
    CHORD(ch_hur, &kp H &kp U &kp R, KH KU KR)
    CHORD(ch_then, &kp T &kp E &kp N, KT KE KN)
    CHORD(ch_mer, &kp M &kp E &kp R, KM KE KR)
    CHORD(ch_now, &kp N &kp O &kp W, KN KO KW)
    CHORD(ch_g_r, &kp G &kp LBKT &kp R, KG KARING KR) // KARING -> LBKT
    CHORD(ch_look, &kp L &kp O &kp Q, KL KO KQ)
    CHORD(ch_sverige, &kp S &kp V &kp E, KS KV KE)
    CHORD(ch_only, &kp O &kp L &kp Y, KO KL KY)
    CHORD(ch_kronor, &kp K &kp R, KK KR)
    CHORD(ch_come, &kp C &kp O &kp M, KC KO KM)
    CHORD(ch_detta, &kp D &kp E &kp A, KD KE KA)
    CHORD(ch_its, &kp I &kp T &kp S, KI KT KS)
    CHORD(ch_nya, &kp N &kp Y &kp A, KN KY KA)
    CHORD(ch_over, &kp O &kp V &kp E, KO KV KE)
    CHORD(ch_procent, &kp P &kp R &kp O, KP KR KO)
    CHORD(ch_think, &kp T &kp I &kp K, KT KI KK)
    CHORD(ch_skall, &kp S &kp K, KS KK)
    CHORD(ch_also, &kp A &kp L &kp S, KA KL KS)
    CHORD(ch_hans, &kp H &kp A &kp X, KH KA KX)
    CHORD(ch_back, &kp B &kp A &kp K, KB KA KK)
    CHORD(ch_utan, &kp U &kp T &kp A, KU KT KA)
    CHORD(ch_after, &kp A &kp F &kp T, KA KF KT)
    CHORD(ch_sina, &kp S &kp I &kp A, KS KI KA) // Note: 'sina' macro used S I A, not S I N A
    CHORD(ch_use, &kp U &kp S, KU KS)
    CHORD(ch_n_got, &kp N &kp LBKT &kp T, KN KARING KT) // KARING -> LBKT
    CHORD(ch_two, &kp T &kp W &kp O, KT KW KO)
    CHORD(ch_svenska, &kp S &kp V &kp N, KS KV KN)
    CHORD(ch_how, &kp H &kp W, KH KW)
    CHORD(ch_allt, &kp A &kp L &kp T, KA KL KT)
    CHORD(ch_our, &kp O &kp U &kp R, KO KU KR)
    CHORD(ch_f_rsta, &kp F &kp SQT &kp T, KF KORING KT) // KORING -> SQT
    CHORD(ch_work, &kp W &kp O, KW KO)
    CHORD(ch_fick, &kp F &kp I &kp K, KF KI KK)
    CHORD(ch_first, &kp F &kp I &kp R, KF KI KR)
    CHORD(ch_m_ste, &kp M &kp LBKT &kp S, KM KARING KS) // KARING -> LBKT
    CHORD(ch_well, &kp W &kp E &kp L, KW KE KL)
    CHORD(ch_mellan, &kp M &kp E &kp A, KM KE KA)
    CHORD(ch_way, &kp W &kp A &kp Y, KW KA KY)
    CHORD(ch_blev, &kp B &kp L &kp E, KB KL KE)
    CHORD(ch_even, &kp E &kp V &kp N, KE KV KN)
    CHORD(ch_bli, &kp B &kp L &kp I, KB KL KI)
    CHORD(ch_new, &kp N &kp E &kp W, KN KE KW)
    CHORD(ch_dag, &kp D &kp A, KD KA)
    CHORD(ch_want, &kp W &kp A &kp N, KW KA KN)
    CHORD(ch_n_gon, &kp N &kp LBKT &kp G, KN KARING KG) // KARING -> LBKT
    CHORD(ch_because, &kp B &kp E &kp C, KB KE KC)
    CHORD(ch_n_gra, &kp N &kp G &kp R, KN KG KR)
    CHORD(ch_any, &kp A &kp N, KA KN)
    CHORD(ch_sitt, &kp S &kp I, KS KI)
    CHORD(ch_these, &kp T &kp E &kp S, KT KE KS)
    CHORD(ch_stora, &kp S &kp T &kp O, KS KT KO)
    CHORD(ch_give, &kp G &kp I &kp W, KG KI KW)
    CHORD(ch_varit, &kp V &kp R &kp I, KV KR KI)
    CHORD(ch_day, &kp D &kp A &kp Y, KD KA KY)
    CHORD(ch_dem, &kp D &kp M, KD KM)
    CHORD(ch_most, &kp M &kp S &kp T, KM KS KT)
    CHORD(ch_bland, &kp B &kp L &kp A, KB KL KA)
    CHORD(ch_us, &kp U &kp S, KU KS)
    CHORD(ch_bra, &kp B &kp R, KB KR)
    CHORD(ch_state, &kp S &kp T &kp A, KS KT KA)
    CHORD(ch_tre, &kp T &kp R &kp E, KT KR KE)
    CHORD(ch_never, &kp N &kp V &kp R, KN KV KR)
    CHORD(ch_ta, &kp T &kp A &kp M, KT KA KM) // Note: 'ta' macro used T A M, not T A
    CHORD(ch_become, &kp B &kp C &kp O, KB KC KO)
    CHORD(ch_genom, &kp G &kp E &kp N, KG KE KN)
    CHORD(ch_between, &kp B &kp E &kp W, KB KE KW)
    CHORD(ch_del, &kp D &kp E &kp L, KD KE KL)
    CHORD(ch_high, &kp H &kp I &kp G, KH KI KG)
    CHORD(ch_hela, &kp H &kp E, KH KE KDUP)
    CHORD(ch_really, &kp R &kp E &kp A, KR KE KA)
    CHORD(ch_annat, &kp A &kp N &kp T, KA KN KT)
    CHORD(ch_something, &kp S &kp O &kp E, KS KO KE) // Note: 'something' macro used S O E, not S O M E T H I N G
    CHORD(ch_fram, &kp F &kp R &kp A, KF KR KA)
    CHORD(ch_g_r_1, &kp G &kp SQT &kp R, KG KORING KR) // KORING -> SQT
    CHORD(ch_another, &kp A &kp N &kp O, KA KN KO)
    CHORD(ch_ingen, &kp I &kp N &kp G, KI KN KG)
    CHORD(ch_much, &kp M &kp U &kp C, KM KU KC)
    CHORD(ch_stockholm, &kp S &kp T &kp H, KS KT KH)
    CHORD(ch_family, &kp F &kp A &kp M, KF KA KM)
    CHORD(ch_g_ra, &kp G &kp SQT &kp A, KG KORING KA) // KORING -> SQT
    CHORD(ch_own, &kp O &kp W &kp M, KO KW KM)
    CHORD(ch_enligt, &kp E &kp N &kp I, KE KN KI)
    CHORD(ch_leave, &kp L &kp E &kp A, KL KE KA)
    CHORD(ch_mig, &kp M &kp I &kp G, KM KI KG)
    CHORD(ch_put, &kp U &kp T, KU KT) // Note: 'put' macro used U T, not P U T
    CHORD(ch_redan, &kp R &kp E &kp D, KR KE KD)
    CHORD(ch_old, &kp O &kp L &kp D, KO KL KD)
    CHORD(ch_inom, &kp I &kp N &kp O, KI KN KO)
    CHORD(ch_while, &kp W &kp I &kp E, KW KI KE)
    CHORD(ch_kom, &kp Q &kp O &kp M, KQ KO KM)
    CHORD(ch_mean, &kp E &kp A &kp N, KE KA KN)
    CHORD(ch_du, &kp D &kp U, KD KU)
    CHORD(ch_keep, &kp K &kp E &kp P, KK KE KP)
    CHORD(ch_helt, &kp E &kp L, KE KL)
    CHORD(ch_student, &kp S &kp T &kp U, KS KT KU)
    CHORD(ch_ju, &kp J &kp U, KJ KU)
    CHORD(ch_why, &kp W &kp H &kp Y, KW KH KY)
    CHORD(ch_samma, &kp S &kp A &kp M, KS KA KM)
    CHORD(ch_let, &kp L &kp E &kp T, KL KE KT)
    CHORD(ch_kanske, &kp K &kp S &kp E, KK KS KE)
    CHORD(ch_great, &kp G &kp R &kp E, KG KR KE)
    CHORD(ch_sj_lv, &kp S &kp J, KS KJ)
    CHORD(ch_same, &kp S &kp A &kp E, KS KA KE)
    CHORD(ch_oss, &kp O &kp S, KO KS KDUP)
    CHORD(ch_big, &kp B &kp I, KB KI)
    CHORD(ch_tidigare, &kp T &kp I &kp A, KT KI KA)
    CHORD(ch_group, &kp G &kp R &kp O, KG KR KO)
    CHORD(ch_se, &kp S &kp E, KS KE)
    CHORD(ch_begin, &kp B &kp E &kp I, KB KE KI)
    CHORD(ch_seem, &kp S &kp E &kp M, KS KE KM)
    CHORD(ch_country, &kp C &kp N &kp T, KC KN KT)
    CHORD(ch_help, &kp H &kp E &kp P, KH KE KP)
    CHORD(ch_talk, &kp T &kp A &kp K, KT KA KK)
    CHORD(ch_where, &kp W &kp H &kp Q, KW KH KQ)
    CHORD(ch_turn, &kp T &kp U &kp R, KT KU KR)
    CHORD(ch_problem, &kp P &kp R &kp L, KP KR KL)
    CHORD(ch_every, &kp E &kp V &kp R, KE KV KR)
    CHORD(ch_start, &kp S &kp T &kp R, KS KT KR)
    CHORD(ch_hand, &kp H &kp A &kp D, KH KA KD)
    CHORD(ch_might, &kp M &kp G, KM KG)
    CHORD(ch_american, &kp A &kp M &kp C, KA KM KC)
    CHORD(ch_show, &kp S &kp H &kp O, KS KH KO)
    CHORD(ch_part, &kp P &kp A &kp R, KP KA KR)
    CHORD(ch_against, &kp A &kp G &kp S, KA KG KS)
    CHORD(ch_place, &kp P &kp L &kp A, KP KL KA)
    CHORD(ch_such, &kp S &kp U &kp H, KS KU KH)
    CHORD(ch_again, &kp A &kp G &kp I, KA KG KI)
    CHORD(ch_few, &kp F &kp E &kp W, KF KE KW)
    CHORD(ch_case, &kp C &kp A &kp E, KC KA KE)
    CHORD(ch_week, &kp W &kp E &kp K, KW KE KK)
    CHORD(ch_company, &kp C &kp O &kp P, KC KO KP)
    CHORD(ch_system, &kp S &kp Y &kp T, KS KY KT)
    CHORD(ch_each, &kp E &kp C &kp H, KE KC KH)
    CHORD(ch_right, &kp R &kp I &kp G, KR KI KG)
    CHORD(ch_program, &kp P &kp R &kp M, KP KR KM)
    CHORD(ch_hear, &kp H &kp E &kp A, KH KE KA)
    CHORD(ch_question, &kp Q &kp E &kp S, KQ KE KS)
    CHORD(ch_during, &kp D &kp U &kp R, KD KU KR)
    CHORD(ch_play, &kp P &kp L &kp Y, KP KL KY)
  };
};

/ {
  macros {
    // This block is intentionally left empty as the macros are now inlined
  };
};
